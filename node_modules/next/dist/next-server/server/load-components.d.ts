/// <reference types="node" />
/// <reference types="react" />
import { IncomingMessage, ServerResponse } from 'http';
import { ParsedUrlQuery } from 'querystring';
import { BuildManifest } from './get-page-files';
import { AppType, DocumentType } from '../lib/utils';
import { PageConfig, NextPageContext } from 'next/types';
export declare function interopDefault(mod: any): any;
export declare type ManifestItem = {
    id: number | string;
    name: string;
    file: string;
    publicPath: string;
};
declare type ReactLoadableManifest = {
    [moduleId: string]: ManifestItem[];
};
declare type Unstable_getStaticProps = (ctx: {
    params: ParsedUrlQuery | undefined;
    preview?: boolean;
    previewData?: any;
}) => Promise<{
    props: {
        [key: string]: any;
    };
    revalidate?: number | boolean;
}>;
export declare type Unstable_getStaticPaths = () => Promise<{
    paths: Array<string | {
        params: ParsedUrlQuery;
    }>;
}>;
declare type Unstable_getServerProps = (context: {
    params: ParsedUrlQuery | undefined;
    req: IncomingMessage;
    res: ServerResponse;
    query: ParsedUrlQuery;
}) => Promise<{
    [key: string]: any;
}>;
export declare type LoadComponentsReturnType = {
    Component: React.ComponentType;
    pageConfig?: PageConfig;
    buildManifest: BuildManifest;
    reactLoadableManifest: ReactLoadableManifest;
    Document: DocumentType;
    DocumentMiddleware?: (ctx: NextPageContext) => void;
    App: AppType;
    unstable_getStaticProps?: Unstable_getStaticProps;
    unstable_getStaticPaths?: Unstable_getStaticPaths;
    unstable_getServerProps?: Unstable_getServerProps;
};
export declare function loadComponents(distDir: string, buildId: string, pathname: string, serverless: boolean): Promise<LoadComponentsReturnType>;
export {};
